(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{149:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(1),r=n(9),c=(n(0),n(159)),i={id:"api",title:"API"},o={id:"api",title:"API",description:"This page gathers public API of `react-native-testing-library` along with usage examples.",source:"@site/docs/API.md",permalink:"/react-native-testing-library/docs/api",editUrl:"https://github.com/callstack/react-native-testing-library/blob/master/docs/API.md",sidebar:"docs",previous:{title:"Getting Started",permalink:"/react-native-testing-library/docs/getting-started"},next:{title:"Queries",permalink:"/react-native-testing-library/docs/api-queries"}},l=[{value:"<code>render</code>",id:"render",children:[{value:"<code>...queries</code>",id:"queries",children:[]},{value:"<code>update</code>",id:"update",children:[]},{value:"<code>unmount</code>",id:"unmount",children:[]},{value:"<code>debug</code>",id:"debug",children:[]},{value:"<code>toJSON</code>",id:"tojson",children:[]}]},{value:"<code>cleanup</code>",id:"cleanup",children:[]},{value:"<code>fireEvent</code>",id:"fireevent",children:[]},{value:"<code>fireEvent[eventName]</code>",id:"fireeventeventname",children:[{value:"<code>fireEvent.press: (element: ReactTestInstance) =&gt; void</code>",id:"fireeventpress-element-reacttestinstance--void",children:[]},{value:"<code>fireEvent.changeText: (element: ReactTestInstance, ...data: Array&lt;any&gt;) =&gt; void</code>",id:"fireeventchangetext-element-reacttestinstance-data-arrayany--void",children:[]},{value:"<code>fireEvent.scroll: (element: ReactTestInstance, ...data: Array&lt;any&gt;) =&gt; void</code>",id:"fireeventscroll-element-reacttestinstance-data-arrayany--void",children:[]}]},{value:"<code>waitForElement</code>",id:"waitforelement",children:[]},{value:"<code>within</code>",id:"within",children:[]},{value:"<code>debug</code>",id:"debug-1",children:[]},{value:"<code>flushMicrotasksQueue</code>",id:"flushmicrotasksqueue",children:[]},{value:"<code>query</code> APIs",id:"query-apis",children:[]},{value:"<code>queryAll</code> APIs",id:"queryall-apis",children:[]},{value:"<code>act</code>",id:"act",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"This page gathers public API of ",Object(c.b)("inlineCode",{parentName:"p"},"react-native-testing-library")," along with usage examples."),Object(c.b)("h2",{id:"render"},Object(c.b)("inlineCode",{parentName:"h2"},"render")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/callstack/react-native-testing-library/blob/master/src/__tests__/render.test.js"}),Object(c.b)("inlineCode",{parentName:"a"},"Example code")))),Object(c.b)("p",null,"Defined as:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"function render(\n  component: React.Element<any>,\n  options?: {\n    /* A React Component that renders `component` as children */\n    wrapper?: React.ComponentType<any>,\n    /* You won't often use this, but it's helpful when testing refs */\n    createNodeMock: (element: React.Element<any>) => any,\n  }\n): RenderResult {}\n")),Object(c.b)("p",null,"Deeply renders given React element and returns helpers to query the output components structure."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\nimport { QuestionsBoard } from '../QuestionsBoard';\n\ntest('should verify two questions', () => {\n  const { queryAllByA11yRole } = render(<QuestionsBoard {...props} />);\n  const allQuestions = queryAllByA11yRole('header');\n\n  expect(allQuestions).toHaveLength(2);\n});\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"When using React context providers, like Redux Provider, you'll likely want to wrap rendered component with them. In such cases it's convenient to create your custom ",Object(c.b)("inlineCode",{parentName:"p"},"render")," method. ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://testing-library.com/docs/react-testing-library/setup#custom-render"}),"Follow this great guide on how to set this up"),".")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"render")," method returns a ",Object(c.b)("inlineCode",{parentName:"p"},"RenderResult")," object that has a few properties:"),Object(c.b)("h3",{id:"queries"},Object(c.b)("inlineCode",{parentName:"h3"},"...queries")),Object(c.b)("p",null,"The most important feature of ",Object(c.b)("inlineCode",{parentName:"p"},"render")," is providing a set of helpful queries that allow you to find certain elements in the view hierarchy."),Object(c.b)("p",null,"See ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-testing-library/docs/api-queries"}),"Queries")," for a complete list."),Object(c.b)("h4",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByText, queryByA11yStates } = render(<Component />);\n")),Object(c.b)("h3",{id:"update"},Object(c.b)("inlineCode",{parentName:"h3"},"update")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Also available under ",Object(c.b)("inlineCode",{parentName:"em"},"rerender")," alias")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"update(element: React.Element<any>): void\nrerender(element: React.Element<any>): void\n")),Object(c.b)("p",null,"Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree. This is useful when testing for ",Object(c.b)("inlineCode",{parentName:"p"},"componentDidUpdate")," behavior, by passing updated props to the component."),Object(c.b)("p",null,Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/callstack/react-native-testing-library/blob/f96d782d26dd4815dbfd01de6ef7a647efd1f693/src/__tests__/act.test.js#L31-L37"}),"Example code")),Object(c.b)("h3",{id:"unmount"},Object(c.b)("inlineCode",{parentName:"h3"},"unmount")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"unmount(): void\n")),Object(c.b)("p",null,"Unmount the in-memory tree, triggering the appropriate lifecycle events"),Object(c.b)("h3",{id:"debug"},Object(c.b)("inlineCode",{parentName:"h3"},"debug")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"debug(message?: string): void\n")),Object(c.b)("p",null,"Prints deeply rendered component passed to ",Object(c.b)("inlineCode",{parentName:"p"},"render")," with optional message on top. Uses ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"#debug"}),"debug.deep")," under the hood, but it's easier to use."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const { debug } = render(<Component />);\n\ndebug('optional message');\n")),Object(c.b)("p",null,"logs optional message and colored JSX:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"optional message\n\n<TouchableOpacity\n  activeOpacity={0.2}\n  onPress={[Function bound fn]}\n>\n  <Text>Press me</Text>\n</TouchableOpacity>\n")),Object(c.b)("h4",{id:"debugshallow"},Object(c.b)("inlineCode",{parentName:"h4"},"debug.shallow")),Object(c.b)("p",null,"Prints shallowly rendered component passed to ",Object(c.b)("inlineCode",{parentName:"p"},"render")," with optional message on top. Uses ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"#debug"}),"debug.shallow")," under the hood, but it's easier to use."),Object(c.b)("h3",{id:"tojson"},Object(c.b)("inlineCode",{parentName:"h3"},"toJSON")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"toJSON(): ReactTestRendererJSON | null\n")),Object(c.b)("p",null,"Get the rendered component JSON representation, e.g. for snapshot testing."),Object(c.b)("h2",{id:"cleanup"},Object(c.b)("inlineCode",{parentName:"h2"},"cleanup")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const cleanup: () => void;\n")),Object(c.b)("p",null,"Unmounts React trees that were mounted with ",Object(c.b)("inlineCode",{parentName:"p"},"render"),"."),Object(c.b)("p",null,"For example, if you're using the ",Object(c.b)("inlineCode",{parentName:"p"},"jest")," testing framework, then you would need to use the ",Object(c.b)("inlineCode",{parentName:"p"},"afterEach")," hook like so:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { cleanup, render } from 'react-native-testing-library';\nimport { View } from 'react-native';\n\nafterEach(cleanup);\n\nit('renders a view', () => {\n  render(<View />);\n  // ...\n});\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"afterEach(cleanup)")," call also works in ",Object(c.b)("inlineCode",{parentName:"p"},"describe")," blocks:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"describe('when logged in', () => {\n  afterEach(cleanup);\n\n  it('renders the user', () => {\n    render(<SiteHeader />);\n    // ...\n  });\n});\n")),Object(c.b)("p",null,"Failing to call ",Object(c.b)("inlineCode",{parentName:"p"},"cleanup")," when you've called ",Object(c.b)("inlineCode",{parentName:"p"},"render"),' could result in a memory leak and tests which are not "idempotent" (which can lead to difficult to debug errors in your tests).'),Object(c.b)("p",null,"The alternative to ",Object(c.b)("inlineCode",{parentName:"p"},"cleanup")," is balancing every ",Object(c.b)("inlineCode",{parentName:"p"},"render")," with an ",Object(c.b)("inlineCode",{parentName:"p"},"unmount")," method call."),Object(c.b)("h2",{id:"fireevent"},Object(c.b)("inlineCode",{parentName:"h2"},"fireEvent")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"fireEvent(element: ReactTestInstance, eventName: string, ...data: Array<any>): void\n")),Object(c.b)("p",null,"Fires native-like event with data."),Object(c.b)("p",null,"Invokes a given event handler (whether native or custom) on the element, bubbling to the root of the rendered tree."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render, fireEvent } from 'react-native-testing-library';\n\ntest('fire changeText event', () => {\n  const onEventMock = jest.fn();\n  const { getByPlaceholder } = render(\n    // MyComponent renders TextInput which has a placeholder 'Enter details'\n    // and with `onChangeText` bound to handleChangeText\n    <MyComponent handleChangeText={onEventMock} />\n  );\n\n  fireEvent(getByPlaceholder('change'), 'onChangeText', 'ab');\n  expect(onEventMock).toHaveBeenCalledWith('ab');\n});\n")),Object(c.b)("p",null,"An example using ",Object(c.b)("inlineCode",{parentName:"p"},"fireEvent")," with native events that aren't already aliased by the ",Object(c.b)("inlineCode",{parentName:"p"},"fireEvent")," api."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { TextInput, View } from 'react-native';\nimport { fireEvent, render } from 'react-native-testing-library';\n\nconst onBlurMock = jest.fn();\n\nconst { getByPlaceholder } = render(\n  <View>\n    <TextInput placeholder=\"my placeholder\" onBlur={onBlurMock} />\n  </View>\n);\n\n// you can omit the `on` prefix\nfireEvent(getByPlaceholder('my placeholder'), 'blur');\n")),Object(c.b)("h2",{id:"fireeventeventname"},Object(c.b)("inlineCode",{parentName:"h2"},"fireEvent[eventName]")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"fireEvent[eventName](element: ReactTestInstance, ...data: Array<any>): void\n")),Object(c.b)("p",null,"Convenience methods for common events like: ",Object(c.b)("inlineCode",{parentName:"p"},"press"),", ",Object(c.b)("inlineCode",{parentName:"p"},"changeText"),", ",Object(c.b)("inlineCode",{parentName:"p"},"scroll"),"."),Object(c.b)("h3",{id:"fireeventpress-element-reacttestinstance--void"},Object(c.b)("inlineCode",{parentName:"h3"},"fireEvent.press: (element: ReactTestInstance) => void")),Object(c.b)("p",null,"Invokes ",Object(c.b)("inlineCode",{parentName:"p"},"press")," event handler on the element or parent element in the tree."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { View, Text, TouchableOpacity } from 'react-native';\nimport { render, fireEvent } from 'react-native-testing-library';\n\nconst onPressMock = jest.fn();\n\nconst { getByText } = render(\n  <View>\n    <TouchableOpacity onPress={onPressMock}>\n      <Text>Press me</Text>\n    </TouchableOpacity>\n  </View>\n);\n\nfireEvent.press(getByText('Press me'));\nexpect(onPressMock).toHaveBeenCalled();\n")),Object(c.b)("h3",{id:"fireeventchangetext-element-reacttestinstance-data-arrayany--void"},Object(c.b)("inlineCode",{parentName:"h3"},"fireEvent.changeText: (element: ReactTestInstance, ...data: Array<any>) => void")),Object(c.b)("p",null,"Invokes ",Object(c.b)("inlineCode",{parentName:"p"},"changeText")," event handler on the element or parent element in the tree."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { View, TextInput } from 'react-native';\nimport { render, fireEvent } from 'react-native-testing-library';\n\nconst onChangeTextMock = jest.fn();\nconst CHANGE_TEXT = 'content';\n\nconst { getByPlaceholder } = render(\n  <View>\n    <TextInput placeholder=\"Enter data\" onChangeText={onChangeTextMock} />\n  </View>\n);\n\nfireEvent.changeText(getByPlaceholder('Enter data'), CHANGE_TEXT);\n")),Object(c.b)("h3",{id:"fireeventscroll-element-reacttestinstance-data-arrayany--void"},Object(c.b)("inlineCode",{parentName:"h3"},"fireEvent.scroll: (element: ReactTestInstance, ...data: Array<any>) => void")),Object(c.b)("p",null,"Invokes ",Object(c.b)("inlineCode",{parentName:"p"},"scroll")," event handler on the element or parent element in the tree."),Object(c.b)("h4",{id:"on-a-scrollview"},"On a ",Object(c.b)("inlineCode",{parentName:"h4"},"ScrollView")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { ScrollView, Text } from 'react-native';\nimport { render, fireEvent } from 'react-native-testing-library';\n\nconst onScrollMock = jest.fn();\nconst eventData = {\n  nativeEvent: {\n    contentOffset: {\n      y: 200,\n    },\n  },\n};\n\nconst { getByText } = render(\n  <ScrollView onScroll={onScrollMock}>\n    <Text>XD</Text>\n  </ScrollView>\n);\n\nfireEvent.scroll(getByText('scroll-view'), eventData);\n")),Object(c.b)("h4",{id:"on-a-flatlist"},"On a ",Object(c.b)("inlineCode",{parentName:"h4"},"FlatList")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { FlatList, View } from 'react-native';\nimport { render, fireEvent } from 'react-native-testing-library';\n\nconst onEndReached = jest.fn();\nconst { getByType } = render(\n  <FlatList\n    data={Array.from({ length: 10 }, (_, key) => ({ key: `${key}` }))}\n    renderItem={() => <View style={{ height: 500, width: 100 }} />}\n    onEndReached={onEndReached}\n    onEndReachedThreshold={0.2}\n  />\n);\nconst eventData = {\n  nativeEvent: {\n    contentOffset: {\n      y: 500,\n    },\n    contentSize: {\n      // Dimensions of the scrollable content\n      height: 500,\n      width: 100,\n    },\n    layoutMeasurement: {\n      // Dimensions of the device\n      height: 100,\n      width: 100,\n    },\n  },\n};\n\nfireEvent.scroll(getByType(ScrollView), eventData);\nexpect(onEndReached).toHaveBeenCalled();\n")),Object(c.b)("h2",{id:"waitforelement"},Object(c.b)("inlineCode",{parentName:"h2"},"waitForElement")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/callstack/react-native-testing-library/blob/master/src/__tests__/waitForElement.test.js"}),Object(c.b)("inlineCode",{parentName:"a"},"Example code")))),Object(c.b)("p",null,"Defined as:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"function waitForElement<T>(\n  expectation: () => T,\n  timeout: number = 4500,\n  interval: number = 50\n): Promise<T> {}\n")),Object(c.b)("p",null,"Waits for non-deterministic periods of time until your element appears or times out. ",Object(c.b)("inlineCode",{parentName:"p"},"waitForElement")," periodically calls ",Object(c.b)("inlineCode",{parentName:"p"},"expectation")," every ",Object(c.b)("inlineCode",{parentName:"p"},"interval")," milliseconds to determine whether the element appeared or not."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render, waitForElement } from 'react-testing-library';\n\ntest('waiting for an Banana to be ready', async () => {\n  const { getByText } = render(<Banana />);\n\n  await waitForElement(() => getByText('Banana ready'));\n});\n")),Object(c.b)("p",null,"If you're using Jest's ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/docs/en/timer-mocks#docsNav"}),"Timer Mocks"),", remember not to use ",Object(c.b)("inlineCode",{parentName:"p"},"async/await")," syntax as it will stall your tests."),Object(c.b)("h2",{id:"within"},Object(c.b)("inlineCode",{parentName:"h2"},"within")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/callstack/react-native-testing-library/blob/master/src/__tests__/within.test.js"}),Object(c.b)("inlineCode",{parentName:"a"},"Example code")))),Object(c.b)("p",null,"Defined as:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"function within(instance: ReactTestInstance): Queries\n")),Object(c.b)("p",null,"Perform ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/react-native-testing-library/docs/api-queries"}),"queries")," scoped to given element. "),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"Please note that additional ",Object(c.b)("inlineCode",{parentName:"p"},"render")," specific operations like ",Object(c.b)("inlineCode",{parentName:"p"},"update"),", ",Object(c.b)("inlineCode",{parentName:"p"},"unmount"),", ",Object(c.b)("inlineCode",{parentName:"p"},"debug"),", ",Object(c.b)("inlineCode",{parentName:"p"},"toJSON")," are ",Object(c.b)("em",{parentName:"p"},"not")," included."))),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const detailsScreen = within(getByA11yHint('Details Screen'));\nexpect(detailsScreen.getByText('Some Text')).toBeTruthy();\nexpect(detailsScreen.getByDisplayValue('Some Value')).toBeTruthy();\nexpect(detailsScreen.getByA11yLabel('Some Label')).toBeTruthy();\nexpect(detailsScreen.getByA11yHint('Some Label')).toBeTruthy();\n")),Object(c.b)("p",null,"Use cases for scoped queries include:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"queries scoped to a single item inside a FlatList containing many items"),Object(c.b)("li",{parentName:"ul"},"queries scoped to a single screen in tests involving screen transitions (e.g. with react-navigation)")),Object(c.b)("h2",{id:"debug-1"},Object(c.b)("inlineCode",{parentName:"h2"},"debug")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/callstack/react-native-testing-library/blob/master/src/__tests__/debug.test.js"}),Object(c.b)("inlineCode",{parentName:"a"},"Example code")))),Object(c.b)("p",null,"Log prettified shallowly rendered component or test instance (just like snapshot) to stdout."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { debug } from 'react-native-testing-library';\n\ndebug(<Component />);\ndebug.shallow(<Component />); // an alias for `debug`\n")),Object(c.b)("p",null,"logs:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<TouchableOpacity\n  activeOpacity={0.2}\n  onPress={[Function bound fn]}\n>\n  <TextComponent\n    text="Press me"\n  />\n</TouchableOpacity>\n')),Object(c.b)("p",null,"There's also ",Object(c.b)("inlineCode",{parentName:"p"},"debug.deep")," that renders deeply to stdout."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { debug } from 'react-native-testing-library';\n\ndebug.deep(<Component />);\ndebug.deep(toJSON(), 'actually debug JSON too'); // useful when Component state changes\n")),Object(c.b)("p",null,"logs:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<View\n  accessible={true}\n  isTVSelectable={true}\n  onResponderGrant={[Function bound touchableHandleResponderGrant]}\n  // ... more props\n  style={\n    Object {\n      \\\\"opacity\\\\": 1,\n    }\n  }\n>\n  <Text>\n    Press me\n  </Text>\n</View>\n')),Object(c.b)("p",null,"Optionally you can provide a string message as a second argument to ",Object(c.b)("inlineCode",{parentName:"p"},"debug"),", which will be displayed right after the component."),Object(c.b)("h2",{id:"flushmicrotasksqueue"},Object(c.b)("inlineCode",{parentName:"h2"},"flushMicrotasksQueue")),Object(c.b)("p",null,"Waits for microtasks queue to flush. Useful if you want to wait for some promises with ",Object(c.b)("inlineCode",{parentName:"p"},"async/await"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { flushMicrotasksQueue, render } from 'react-native-testing-library';\n\ntest('fetch data', async () => {\n  const { getByText } = render(<FetchData />);\n  getByText('fetch');\n  await flushMicrotasksQueue();\n  expect(getByText('fetch').props.title).toBe('loaded');\n});\n")),Object(c.b)("h2",{id:"query-apis"},Object(c.b)("inlineCode",{parentName:"h2"},"query")," APIs"),Object(c.b)("p",null,"Each of the get APIs listed in the render section above have a complimentary query API. The get APIs will throw errors if a proper node cannot be found. This is normally the desired effect. However, if you want to make an assertion that an element is not present in the hierarchy, then you can use the query API instead:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { queryByText } = render(<Form />);\nconst submitButton = queryByText('submit');\nexpect(submitButton).toBeNull(); // it doesn't exist\n")),Object(c.b)("h2",{id:"queryall-apis"},Object(c.b)("inlineCode",{parentName:"h2"},"queryAll")," APIs"),Object(c.b)("p",null,"Each of the query APIs have a corresponding queryAll version that always returns an Array of matching nodes. getAll is the same but throws when the array has a length of 0."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { queryAllByText } = render(<Forms />);\nconst submitButtons = queryAllByText('submit');\nexpect(submitButtons).toHaveLength(3); // expect 3 elements\n")),Object(c.b)("h2",{id:"act"},Object(c.b)("inlineCode",{parentName:"h2"},"act")),Object(c.b)("p",null,"Useful function to help testing components that use hooks API. By default any ",Object(c.b)("inlineCode",{parentName:"p"},"render"),", ",Object(c.b)("inlineCode",{parentName:"p"},"update"),", and ",Object(c.b)("inlineCode",{parentName:"p"},"fireEvent")," calls are wrapped by this function, so there is no need to wrap it manually. This method is re-exported from ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactTestRenderer.js#L567%5D"}),Object(c.b)("inlineCode",{parentName:"a"},"react-test-renderer")),"."))}b.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var o=n(1),i=n(9),s=(n(0),n(158)),r={id:"redux-integration",title:"Redux Integration"},a={id:"redux-integration",title:"Redux Integration",description:"This section deals with testing RN applications developed with Redux. We will be developing a simple TODO application capable of adding and removing an item. Once included, the timestamp is included.",source:"@site/docs/ReduxIntegration.md",permalink:"/react-native-testing-library/docs/redux-integration",editUrl:"https://github.com/callstack/react-native-testing-library/blob/master/docs/ReduxIntegration.md",sidebar:"docs",previous:{title:"React Navigation",permalink:"/react-native-testing-library/docs/react-navigation"}},c=[{value:"Setting up",id:"setting-up",children:[]},{value:"Test cases",id:"test-cases",children:[]},{value:"Running tests",id:"running-tests",children:[]}],d={rightToc:c};function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This section deals with testing RN applications developed with Redux. We will be developing a simple TODO application capable of adding and removing an item. Once included, the timestamp is included."),Object(s.b)("h2",{id:"setting-up"},"Setting up"),Object(s.b)("p",null,"An example of setting up can be found ",Object(s.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/callstack/react-native-testing-library/tree/master/examples/redux"}),"here"),"."),Object(s.b)("h2",{id:"test-cases"},"Test cases"),Object(s.b)("p",null,"Our test is on the components that either dispatch actions on the redux store or read some data from the redux store. This means we will test ",Object(s.b)("inlineCode",{parentName:"p"},"./components/TodoElem.js")," and ",Object(s.b)("inlineCode",{parentName:"p"},"./components/TodoList.js"),". Thus we will create ",Object(s.b)("inlineCode",{parentName:"p"},"./components/AddTodo.test.js")," and ",Object(s.b)("inlineCode",{parentName:"p"},"./components/TodoList.test.js")),Object(s.b)("p",null,"For ",Object(s.b)("inlineCode",{parentName:"p"},"./components/AddTodo.test.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Provider } from 'react-redux';\nimport { cleanup, fireEvent, render } from 'react-native-testing-library';\nimport configureStore from '../store';\nimport AddTodo from './AddTodo';\n\ndescribe('AddTodo component test', () => {\n  test('adds a new TODO when the button is pressed', () => {\n    const store = configureStore();\n\n    const component = (\n      <Provider store={store}>\n        <AddTodo />\n      </Provider>\n    );\n\n    const { getByPlaceholder, getByText } = render(component);\n\n    // There is a TextInput.\n    // https://github.com/callstack/react-native-testing-library/blob/ae3d4af370487e1e8fedd8219f77225690aefc59/examples/redux/components/AddTodo.js#L24\n    const input = getByPlaceholder(/repository/i);\n    expect(input).toBeTruthy();\n\n    const textToEnter = 'This is a random element';\n    fireEvent.changeText(input, textToEnter);\n    fireEvent.press(getByText('Submit form'));\n\n    const todosState = store.getState().todos;\n\n    expect(todosState.length).toEqual(1);\n\n    expect(todosState).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          id: 1,\n          text: textToEnter,\n          date: expect.any(Date),\n        }),\n      ])\n    );\n  });\n});\n")),Object(s.b)("p",null,"For the ",Object(s.b)("inlineCode",{parentName:"p"},"./components/TodoList.js")),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Provider } from 'react-redux';\nimport { fireEvent, render } from 'react-native-testing-library';\nimport configureStore from '../store';\nimport TodoList from './TodoList';\n\ndescribe('TodoList component test', () => {\n  test('it should execute with a store with 4 elements', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n        { id: 3, text: 'Sleep something', date: new Date() },\n        { id: 4, text: 'Sleep something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    const { getAllByText } = render(component);\n    const todoElems = getAllByText(/something/i);\n\n    expect(todoElems.length).toEqual(4);\n  });\n\n  test('should execute with 2 elements and end up with 1 after delete', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    const { getAllByText } = render(component);\n    const todoElems = getAllByText(/something/i);\n\n    expect(todoElems.length).toBe(2);\n\n    const buttons = getAllByText('Delete');\n    expect(buttons.length).toBe(2);\n\n    fireEvent.press(buttons[0]);\n    expect(getAllByText('Delete').length).toBe(1);\n  });\n});\n")),Object(s.b)("h2",{id:"running-tests"},"Running tests"),Object(s.b)("p",null,"To run the tests, place a test script inside your package.json"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json"}),'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),Object(s.b)("p",null,"And run the test script with npm test or yarn test."))}l.isMDXComponent=!0}}]);
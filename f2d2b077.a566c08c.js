(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{73:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return b}));var r=a(1),i=a(6),n=(a(0),a(80)),c={id:"how-should-i-query",title:"How Should I Query?"},l={unversionedId:"how-should-i-query",id:"how-should-i-query",isDocsHomePage:!1,title:"How Should I Query?",description:"Priority",source:"@site/docs/HowShouldIQuery.md",permalink:"/react-native-testing-library/docs/how-should-i-query",editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/docs/HowShouldIQuery.md",sidebar:"docs",previous:{title:"Migration to 2.0",permalink:"/react-native-testing-library/docs/migration-v2"},next:{title:"ESLint Plugin Testing Library Compatibility",permalink:"/react-native-testing-library/docs/eslint-plugin-testing-library"}},o=[{value:"Priority",id:"priority",children:[]}],s={rightToc:o};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"priority"},"Priority"),Object(n.b)("p",null,"Based on the ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://testing-library.com/docs/guiding-principles"}),"Guiding Principles"),", your test should resemble how users interact with your code (component, page, etc.) as much as possible. With this in mind, we recommend this order of priority:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("strong",{parentName:"li"},"Queries Accessible to Everyone")," queries that reflect the experience of visual users as well as those that use assistive technology",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bytext"}),Object(n.b)("inlineCode",{parentName:"a"},"getByText")),": This is the number 1 method a user finds any visible text on interactive and non-interactive elements."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bydisplayvalue"}),Object(n.b)("inlineCode",{parentName:"a"},"getByDisplayValue")),": Useful for the current value of a ",Object(n.b)("inlineCode",{parentName:"li"},"TextInput"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#byplaceholdertext"}),Object(n.b)("inlineCode",{parentName:"a"},"getByPlaceholderText")),": Only useful for targeting a placeholder of a ",Object(n.b)("inlineCode",{parentName:"li"},"TextInput"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bylabeltext"}),Object(n.b)("inlineCode",{parentName:"a"},"getByLabelText")),": This can be used to query every element that is exposed in the accessibility tree as a label, usually when there's no visible text."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11yhint-byaccessibilityhint-byhinttext"}),Object(n.b)("inlineCode",{parentName:"a"},"getByHintText")),": This can be used to query every element that is exposed in the accessibility tree as a hint. Make sure it also has a label set."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11ystate-byaccessibilitystate"}),Object(n.b)("inlineCode",{parentName:"a"},"getByAccessibilityState")),": This can be used to query every element that is exposed in the accessibility tree as a state of an interactive element, like a checkbox."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11value-byaccessibilityvalue"}),Object(n.b)("inlineCode",{parentName:"a"},"getByAccessibilityValue")),": This can be used to query every element that is exposed in the accessibility tree as a value on a range, like a slider."))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("strong",{parentName:"li"},"Queries Users Can Infer"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#byrole"}),Object(n.b)("inlineCode",{parentName:"a"},"getByRole")),": This can be used to query every element that is exposed in the accessibility tree as a role, like buttons or images."))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("strong",{parentName:"li"},"Test IDs"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bytestid"}),Object(n.b)("inlineCode",{parentName:"a"},"getByTestId")),": The user cannot see (or hear) these, so this is only recommended for cases where you can't match by text or it doesn't make sense")))))}b.isMDXComponent=!0},80:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return h}));var r=a(0),i=a.n(r);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},u=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},y=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=b(a),y=r,h=u["".concat(c,".").concat(y)]||u[y]||p[y]||n;return a?i.a.createElement(h,l({ref:t},s,{components:a})):i.a.createElement(h,l({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,c=new Array(n);c[0]=y;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var s=2;s<n;s++)c[s]=a[s];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,a)}y.displayName="MDXCreateElement"}}]);
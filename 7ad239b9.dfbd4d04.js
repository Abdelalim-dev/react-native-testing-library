(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return r})),n.d(t,"default",(function(){return o}));var a=n(1),i=n(9),l=(n(0),n(159)),c={id:"api-queries",title:"Queries"},b={id:"api-queries",title:"Queries",description:"## Variants",source:"@site/docs/Queries.md",permalink:"/react-native-testing-library/docs/api-queries",editUrl:"https://github.com/callstack/react-native-testing-library/blob/master/docs/Queries.md",sidebar:"docs",previous:{title:"API",permalink:"/react-native-testing-library/docs/api"},next:{title:"React Navigation",permalink:"/react-native-testing-library/docs/react-navigation"}},r=[{value:"Variants",id:"variants",children:[{value:"getBy",id:"getby",children:[]},{value:"getAllBy",id:"getallby",children:[]},{value:"queryBy",id:"queryby",children:[]},{value:"queryAllBy",id:"queryallby",children:[]}]},{value:"Queries",id:"queries",children:[{value:"<code>ByText</code>",id:"bytext",children:[]},{value:"<code>ByPlaceholder</code>",id:"byplaceholder",children:[]},{value:"<code>ByDisplayValue</code>",id:"bydisplayvalue",children:[]},{value:"<code>ByTestId</code>",id:"bytestid",children:[]},{value:"<code>ByA11yLabel</code>, <code>ByAccessibilityLabel</code>",id:"bya11ylabel-byaccessibilitylabel",children:[]},{value:"<code>ByA11yHint</code>, <code>ByAccessibilityHint</code>",id:"bya11yhint-byaccessibilityhint",children:[]},{value:"<code>ByA11yStates</code>, <code>ByAccessibilityStates</code>",id:"bya11ystates-byaccessibilitystates",children:[]},{value:"<code>ByA11yRole</code>, <code>ByAccessibilityRole</code>",id:"bya11yrole-byaccessibilityrole",children:[]},{value:"<code>ByA11yState</code>, <code>ByAccessibilityState</code>",id:"bya11ystate-byaccessibilitystate",children:[]},{value:"<code>ByA11Value</code>, <code>ByAccessibilityValue</code>",id:"bya11value-byaccessibilityvalue",children:[]}]},{value:"Unit testing helpers",id:"unit-testing-helpers",children:[{value:"<code>UNSAFE_ByType</code>, <code>ByType</code>",id:"unsafe_bytype-bytype",children:[]},{value:"<code>UNSAFE_ByProps</code>, <code>ByProps</code>",id:"unsafe_byprops-byprops",children:[]},{value:"<code>ByName</code>",id:"byname",children:[]}]}],s={rightToc:r};function o(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"variants"},"Variants"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("inlineCode",{parentName:"p"},"getBy")," queries are shown by default in the ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#queries"}),"query documentation"),"\nbelow.")),Object(l.b)("h3",{id:"getby"},"getBy"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"getBy*")," queries return the first matching node for a query, and throw an error if no elements match or if more than one match is found (use ",Object(l.b)("inlineCode",{parentName:"p"},"getAllBy")," instead)."),Object(l.b)("h3",{id:"getallby"},"getAllBy"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"getAllBy*")," queries return an array of all matching nodes for a query, and throw an error if no elements match."),Object(l.b)("h3",{id:"queryby"},"queryBy"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"queryBy*")," queries return the first matching node for a query, and return ",Object(l.b)("inlineCode",{parentName:"p"},"null")," if no elements match. This is useful for asserting an element that is not present. This throws if more than one match is found (use ",Object(l.b)("inlineCode",{parentName:"p"},"queryAllBy")," instead)."),Object(l.b)("h3",{id:"queryallby"},"queryAllBy"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"queryAllBy*")," queries return an array of all matching nodes for a query, and return an empty array (",Object(l.b)("inlineCode",{parentName:"p"},"[]"),") if no elements match."),Object(l.b)("h2",{id:"queries"},"Queries"),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"Note: most methods like this one return a ",Object(l.b)("a",Object(a.a)({parentName:"em"},{href:"https://reactjs.org/docs/test-renderer.html#testinstance"}),Object(l.b)("inlineCode",{parentName:"a"},"ReactTestInstance"))," with following properties that you may be interested in:")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"type ReactTestInstance = {\n  type: string | Function,\n  props: { [propName: string]: any },\n  parent: null | ReactTestInstance,\n  children: Array<ReactTestInstance | string>,\n};\n")),Object(l.b)("h3",{id:"bytext"},Object(l.b)("inlineCode",{parentName:"h3"},"ByText")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByText, getAllByText, queryByText, queryAllByText")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching text \u2013 may be a string or regular expression."),Object(l.b)("p",null,"This method will join ",Object(l.b)("inlineCode",{parentName:"p"},"<Text>")," siblings to find matches, similarly to ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://facebook.github.io/react-native/docs/text#containers"}),"how React Native handles these components"),". This will allow for querying for strings that will be visually rendered together, but may be semantically separate React components."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByText } = render(<MyComponent />);\nconst element = getByText('banana');\n")),Object(l.b)("h3",{id:"byplaceholder"},Object(l.b)("inlineCode",{parentName:"h3"},"ByPlaceholder")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByPlaceholder, getAllByPlaceholder, queryByPlaceholder, queryAllByPlaceholder")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," for a ",Object(l.b)("inlineCode",{parentName:"p"},"TextInput")," with a matching placeholder \u2013 may be a string or regular expression."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByPlaceholder } = render(<MyComponent />);\nconst element = getByPlaceholder('username');\n")),Object(l.b)("h3",{id:"bydisplayvalue"},Object(l.b)("inlineCode",{parentName:"h3"},"ByDisplayValue")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByDisplayValue, getAllByDisplayValue, queryByDisplayValue, queryAllByDisplayValue")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," for a ",Object(l.b)("inlineCode",{parentName:"p"},"TextInput")," with a matching display value \u2013 may be a string or regular expression."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByDisplayValue } = render(<MyComponent />);\nconst element = getByDisplayValue('username');\n")),Object(l.b)("h3",{id:"bytestid"},Object(l.b)("inlineCode",{parentName:"h3"},"ByTestId")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByTestId, getAllByTestId, queryByTestId, queryAllByTestId")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"testID")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByTestId } = render(<MyComponent />);\nconst element = getByTestId('unique-id');\n")),Object(l.b)("h3",{id:"bya11ylabel-byaccessibilitylabel"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11yLabel"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityLabel")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yLabel, getAllByA11yLabel, queryByA11yLabel, queryAllByA11yLabel\ngetByAccessibilityLabel, getAllByAccessibilityLabel, queryByAccessibilityLabel, queryAllByAccessibilityLabel")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityLabel")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yLabel } = render(<MyComponent />);\nconst element = getByA11yLabel('my-label');\n")),Object(l.b)("h3",{id:"bya11yhint-byaccessibilityhint"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11yHint"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityHint")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yHint, getAllByA11yHint, queryByA11yHint, queryAllByA11yHint\ngetByAccessibilityHint, getAllByAccessibilityHint, queryByAccessibilityHint, queryAllByAccessibilityHint")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityHint")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yHint } = render(<MyComponent />);\nconst element = getByA11yHint('my-hint');\n")),Object(l.b)("h3",{id:"bya11ystates-byaccessibilitystates"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11yStates"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityStates")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yStates, getAllByA11yStates, queryByA11yStates, queryAllByA11yStates\ngetByAccessibilityStates, getAllByAccessibilityStates, queryByAccessibilityStates, queryAllByAccessibilityStates")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityStates")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yStates } = render(<MyComponent />);\nconst element = getByA11yStates(['checked']);\nconst element2 = getByA11yStates('checked');\n")),Object(l.b)("h3",{id:"bya11yrole-byaccessibilityrole"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11yRole"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityRole")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yRole, getAllByA11yRole, queryByA11yRole, queryAllByA11yRole\ngetByAccessibilityRole, getAllByAccessibilityRole, queryByAccessibilityRole, queryAllByAccessibilityRole")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityRole")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yRole } = render(<MyComponent />);\nconst element = getByA11yRole('button');\n")),Object(l.b)("h3",{id:"bya11ystate-byaccessibilitystate"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11yState"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityState")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yState, getAllByA11yState, queryByA11yState, queryAllByA11yState\ngetByAccessibilityState, getAllByAccessibilityState, queryByAccessibilityState, queryAllByAccessibilityState")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityState")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yState } = render(<Component />);\nconst element = getByA11yState({ disabled: true });\n")),Object(l.b)("h3",{id:"bya11value-byaccessibilityvalue"},Object(l.b)("inlineCode",{parentName:"h3"},"ByA11Value"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByAccessibilityValue")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"getByA11yValue, getAllByA11yValue, queryByA11yValue, queryAllByA11yValue\ngetByAccessibilityValue, getAllByAccessibilityValue, queryByAccessibilityValue, queryAllByAccessibilityValue")),Object(l.b)("p",null,"Returns a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching ",Object(l.b)("inlineCode",{parentName:"p"},"accessibilityValue")," prop."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { render } from 'react-native-testing-library';\n\nconst { getByA11yValue } = render(<Component />);\nconst element = getByA11yValue({ min: 40 });\n")),Object(l.b)("h2",{id:"unit-testing-helpers"},"Unit testing helpers"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Use sparingly and responsibly, escape hatches here")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"render")," from ",Object(l.b)("inlineCode",{parentName:"p"},"react-native-testing-library")," exposes additional queries that ",Object(l.b)("strong",{parentName:"p"},"should not be used in component integration testing"),", but some users (like component library creators) interested in unit testing some components may find helpful."),Object(l.b)("details",null,Object(l.b)("summary",null,"Queries helpful in unit testing"),Object(l.b)("p",null,"The interface is the same as for other queries, but we won't provide full names so that they're harder to find by search engines."),Object(l.b)("h3",{id:"unsafe_bytype-bytype"},Object(l.b)("inlineCode",{parentName:"h3"},"UNSAFE_ByType"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByType")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Note: added in v1.4")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"This method has been ",Object(l.b)("strong",{parentName:"p"},"deprecated")," and has been prepended with ",Object(l.b)("inlineCode",{parentName:"p"},"UNSAFE_")," prefix. In react-native-testing-library 2.x only the prefixed version will work.")),Object(l.b)("p",null,"A method returning a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching a React component type. Throws when no matches."),Object(l.b)("h3",{id:"unsafe_byprops-byprops"},Object(l.b)("inlineCode",{parentName:"h3"},"UNSAFE_ByProps"),", ",Object(l.b)("inlineCode",{parentName:"h3"},"ByProps")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"This method has been ",Object(l.b)("strong",{parentName:"p"},"deprecated")," and has been prepended with ",Object(l.b)("inlineCode",{parentName:"p"},"UNSAFE_")," prefix. In react-native-testing-library 2.x only the prefixed version will work.")),Object(l.b)("p",null,"A method returning a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching props object"),Object(l.b)("h3",{id:"byname"},Object(l.b)("inlineCode",{parentName:"h3"},"ByName")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"This method has been ",Object(l.b)("strong",{parentName:"p"},"deprecated")," because using it results in fragile tests that may break between minor React Native versions. ",Object(l.b)("strong",{parentName:"p"},"DON'T USE IT"),". It will be removed in next major release (v2.0). Use the other alternatives, such as ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#bytext"}),Object(l.b)("inlineCode",{parentName:"a"},"getByText"))," instead. It's listed here only for back-compat purposes for early adopters of the library\nA method returning a ",Object(l.b)("inlineCode",{parentName:"p"},"ReactTestInstance")," with matching a React component type. Throws when no matches."))))}o.isMDXComponent=!0}}]);